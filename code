                                                                            # Benchmark case
#initial information set
set.seed(100)
#initial perception of theta distribution 
theta_initial_mean <- 500
theta_initial_var <- 5000
theta_initial_precision <- 1/theta_initial_var

#error distribution 
error_mean <- 0
error_var <- 2000
error_precision <- 1/error_var

#signal distribution 
signal_mean <- theta_initial_mean + error_mean
signal_var <- theta_initial_var + error_var
signal_precision <- 1/signal_var
n=10000
signal <- rnorm(n, mean= signal_mean, sd= sqrt(signal_var))

#first period
precision_theta_x_1 <- theta_initial_precision + signal_precision
alpha_1 <- signal_precision/precision_theta_x_1
beta_1 <- theta_initial_precision/precision_theta_x_1
mean_theta_x_1 <-alpha_1*signal+beta_1*theta_initial_mean 
mean_theta_x_1 <- as.data.frame(mean_theta_x_1)

#simulation itself 
c = 260
w = -250
vaccination_decision <- data.frame(0)
A <- vector()
A[1] <- 0
a <- vector()
for (i in 1:10){
  a[i] <- (c + w*(2*A[i]-1))/(1-A[i])
  if(i==1){
    for (j in 1:n){
      if (mean_theta_x_1[j,]<a[i]){
        vaccination_decision[j,i] <- 0
      }
      else{
        vaccination_decision[j,i] <- 1
      } 
    }
  }else 
    for(j in 1:n){
    if (mean_theta_x_1[j,]<a[i] &vaccination_decision[j,i-1]==0){
      vaccination_decision[j,i] <- 0
    }
    else{
      vaccination_decision[j,i] <- 1
    }
  }
  A[i+1] <- sum(vaccination_decision[,i])/n
}

A_time <- vector()
for (i in 1:11){
  A_time[i] <- (i-1)
}
#final graph
A_plot <- plot.default(x=A_time, y=A, main="vaccination rate growth (w =-250 , c =260 ), HV, no LA", xlab = "point in time", ylab="vaccination rate", type="s")


#a graph with normal distributions for figure 7
plot.function(x = function(t) dnorm(x = t, mean = signal_mean, sd = sqrt(signal_var )),
              from = 0,
              to = 1000,
              col = "red",
              xlab = "values",
              ylab = "densities",
              main = "Distribution of signal for HV and LV cases")
plot.function(x = function(t) dnorm(x = t, mean = signal_mean, sd = sqrt(signal_var*10)),
              from = 0,
              to = 1000,
              col = "blue",
              add = TRUE)
legend(x = "topright",
       legend = paste("Distbn.", 1:2),
       col = c("red", "blue"),
       lty = 1)

library(ggplot2)
#https://community.rstudio.com/t/how-to-plot-overlapped-normal-distribution-curves-in-r-preferably-in-ggplot/35172/2 - the code for a figure 7 
was borrowed from community.r.studio

                                                                             # Full model (with social learning component)
#initial information set
set.seed(100)
#initial perception of theta distribution 
theta_initial_mean <- 500
theta_initial_var <- 50000
theta_initial_precision <- 1/theta_initial_var

#error distribution 
error_mean <- 0
error_var <- 20000
error_precision <- 1/error_var

#signal distribution 
signal_mean <- theta_initial_mean + error_mean
signal_var <- theta_initial_var + error_var
signal_precision <- 1/signal_var
n=10000
signal <- rnorm(n, mean= signal_mean, sd= sqrt(signal_var))

#first period
precision_theta_x_1 <- theta_initial_precision + signal_precision
alpha_1 <- signal_precision/precision_theta_x_1
beta_1 <- theta_initial_precision/precision_theta_x_1
mean_theta_x_1 <-alpha_1*signal+beta_1*theta_initial_mean 
mean_theta_x_1 <- as.data.frame(mean_theta_x_1)


#simulation itself
c = 260
w = -270
vaccination_decision <- data.frame(0)
A <- vector()
A[1] <- 0
a <- vector()
signal <- as.data.frame(signal)
for (i in 1:2){
  a[i] <- (c + w*(2*A[i]-1))/(1-A[i])
  if(i==1){
    for (j in 1:n){
      if (mean_theta_x_1[j,]<a[i]){
        vaccination_decision[j,i] <- 0
      }
      else{
        vaccination_decision[j,i] <- 1
      } 
    }
  }else {
    Beta <- (a[i-1]-(alpha_1+beta_1)*theta_initial_mean)/(signal_precision/precision_theta_x_1^2)^(1/2)
    pdf_Beta <- dnorm(x=Beta,mean=0,sd=1)
    cdf_Beta <- pnorm(q=Beta,mean=0,sd=1)
    var_z <- signal_precision/precision_theta_x_1^2
    var_e <- signal_precision/precision_theta_x_1^2
    precision_update_z <- 1/(var_z*(1+Beta*pdf_Beta/(1-cdf_Beta)-(pdf_Beta/(1-cdf_Beta))^2))
    precision_update_e <- 1/(var_e*(1-Beta*pdf_Beta/cdf_Beta-(pdf_Beta/cdf_Beta)^2))                             
    total_precision <- (signal_precision+theta_initial_precision+A[i]*n*precision_update_z+(n- 1 - A[i]*n)*precision_update_e)
    alpha_2 <- signal_precision/total_precision
    beta_2 <- theta_initial_precision/total_precision
    mean_update_z <- (alpha_1+beta_1)*theta_initial_mean+(signal_precision/precision_theta_x_1^2)^(1/2)*pdf_Beta/(1-cdf_Beta)
    mean_update_e <- (alpha_1+beta_1)*theta_initial_mean-(signal_precision/precision_theta_x_1^2)^(1/2)*pdf_Beta/cdf_Beta
    for(j in 1:n){
    mean_theta_x_1[j,] <- alpha_2*signal[j,]+beta_2*theta_initial_mean+(A[i]*n* precision_update_z/total_precision*mean_update_z
    +(n- 1 - A[i]*n)*precision_update_e/total_precision*mean_update_e)
    if (mean_theta_x_1[j,]<a[i] &vaccination_decision[j,i-1]==0){
      vaccination_decision[j,i] <- 0
    }
    else{
      vaccination_decision[j,i] <- 1
}
    }
  }
  A[i+1] <- sum(vaccination_decision[,i])/n
}
A
a
A_time <- vector()
for (i in 1:3){
  A_time[i] <- (i-1)
}
#final graph
A_plot <- plot.default(x=A_time, y=A, main="vaccination rate growth (w = -240, c = 240), HV, LA", xlab = "point in time", ylab="vaccination rate", type="s")


